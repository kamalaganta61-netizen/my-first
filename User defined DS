# User-Defined Data Structures in Python:

# Data Structure	Working Principle    	Example Rule
# Stack	                LIFO	          Last In → First Out
# Queue	                FIFO	          First In → First Out
# Tree           	Hierarchical	      Parent → Child relationship
# Graph         	Network structure	  Nodes connected by edges

#1. Stack

#Definition: Follows LIFO (Last In, First Out) rule.

#The last element added is the first one removed.

# Example:
class Stack:
    def __init__(self):
        self.stack = []
    
    def push(self, item):
        self.stack.append(item)
    
    def pop(self):
        if not self.is_empty():
            return self.stack.pop()
        return "Stack is empty"
    
    def is_empty(self):
        return len(self.stack) == 0
    
    def display(self):
        print(self.stack)

s = Stack()
s.push(10)
s.push(20)
s.push(30)
s.display()       
print(s.pop())    
s.display()       

#2. Queue

#Definition: Follows FIFO (First In, First Out) rule.

#The first element added is the first one removed.

#Example:
class Queue:
    def __init__(self):
        self.queue = []
    
    def enqueue(self, item):
        self.queue.append(item)
    
    def dequeue(self):
        if not self.is_empty():
            return self.queue.pop(0)
        return "Queue is empty"
    
    def is_empty(self):
        return len(self.queue) == 0
    
    def display(self):
        print(self.queue)

q = Queue()
q.enqueue(10)
q.enqueue(20)
q.enqueue(30)
q.display()       
print(q.dequeue())
q.display()  

# 3. Linked List

# Definition: A sequence of nodes, where each node contains data and a reference (link) to the next node.

# Example:
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None
    
    def append(self, data):
        new_node = Node(data)
        if not self.head:
            self.head = new_node
            return
        current = self.head
        while current.next:
            current = current.next
        current.next = new_node
    
    def display(self):
        current = self.head
        while current:
            print(current.data, end=" -> ")
            current = current.next
        print("None")

l = LinkedList()
l.append(10)
l.append(20)
l.append(30)
l.display()   # 10 -> 20 -> 30 -> None

# 4. Tree

# Definition: A hierarchical data structure with nodes.
# Each node has data, and child nodes.

# Example:
class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

# Create root and child nodes
root = Node(10)
root.left = Node(20)
root.right = Node(30)

print(root.data)       # 10
print(root.left.data)  # 20
print(root.right.data) # 30

# 5. Graph

# Definition: A collection of nodes (vertices) connected by edges.

# Example using dictionary:
class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, node, neighbor):
        if node not in self.graph:
            self.graph[node] = []
        self.graph[node].append(neighbor)

    def display(self):
        for node in self.graph:
            print(node, "->", self.graph[node])

g = Graph()
g.add_edge("A", "B")
g.add_edge("A", "C")
g.add_edge("B", "D")
g.display()
